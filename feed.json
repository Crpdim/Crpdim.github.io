{
    "version": "https://jsonfeed.org/version/1",
    "title": "Carpe diem",
    "subtitle": "採擷今日!",
    "icon": "https://crpdim.github.io/images/favicon.ico",
    "description": "A good boy!",
    "home_page_url": "https://crpdim.github.io",
    "items": [
        {
            "id": "https://crpdim.github.io/ai/machine-learning/machine_course01/",
            "url": "https://crpdim.github.io/ai/machine-learning/machine_course01/",
            "title": "机器学习课程01-课程内容大纲",
            "date_published": "2023-03-28T16:00:00.000Z",
            "content_html": "<h1 id=\"机器学习课程01\"><a class=\"anchor\" href=\"#机器学习课程01\">#</a> 机器学习课程 01</h1>\n<h2 id=\"机器学习机器帮忙找函数\"><a class=\"anchor\" href=\"#机器学习机器帮忙找函数\">#</a> 机器学习 = 机器帮忙找函数</h2>\n<blockquote>\n<p>机器学习目的： 写一个人类写不出的复杂函数，实现人类想要的功能</p>\n</blockquote>\n<p>如：</p>\n<ul>\n<li>声音转文字： 输入音频信号，机器帮忙找到一个函数将音频信号转换为文字</li>\n<li>图片识别： 输入图片，机器帮忙找到一个函数将图片转换为文字</li>\n<li>AlphaGo： 输入棋盘黑白子位置，机器帮忙找到一个函数输出下一步落子位置</li>\n</ul>\n<blockquote>\n<p>深度学习： 机器学习找的函数是一个类神经网络</p>\n</blockquote>\n<h2 id=\"输入与输出\"><a class=\"anchor\" href=\"#输入与输出\">#</a> 输入与输出</h2>\n<blockquote>\n<p>机器学习的输入输出形式</p>\n</blockquote>\n<ul>\n<li>输入形式有：序列 (Sequence)、向量 (Vector)、矩阵 (Matrix)</li>\n<li>输出形式有：数值 (Regression)、类别 (Classification)、文档</li>\n</ul>\n<h2 id=\"如何训练机器\"><a class=\"anchor\" href=\"#如何训练机器\">#</a> 如何训练机器</h2>\n<blockquote>\n<p>怎样让机器分辨宝可梦和数码宝贝？</p>\n</blockquote>\n<h3 id=\"训练步骤\"><a class=\"anchor\" href=\"#训练步骤\">#</a> 训练步骤</h3>\n<ol>\n<li>收集训练数据：收集很多数码宝贝和宝可梦的图片</li>\n<li>标注数据类型：标注图片的 label</li>\n<li>将<ins>输入与对应的 label</ins> 交给机器：让机器自己找出能分辨数码宝贝和宝可梦的函数（输入精灵图片，输出类别）</li>\n</ol>\n<h3 id=\"self-supervised-learning\"><a class=\"anchor\" href=\"#self-supervised-learning\">#</a> Self-supervised Learning</h3>\n<blockquote>\n<p>收集数据会花费大量时间，且有很多相似但不同的任务怎么办？如：识别宝可梦和数码宝贝与识别猫和狗。</p>\n</blockquote>\n<p>在训练之前练就基本功：(Pre-train) 即基本模型，就可以在这基础上很快适应其他任务。</p>\n<h3 id=\"generative-adversarial-network\"><a class=\"anchor\" href=\"#generative-adversarial-network\">#</a> Generative Adversarial Network</h3>\n<blockquote>\n<p>生成对抗网络，让机器自己学习生成数据</p>\n</blockquote>\n<p>只需要收集大量输入与大量输出，输入与输出之间<ins>不需要成对的关系</ins>，机器就能自动找出对应关系。</p>\n<h3 id=\"reinforcement-learning\"><a class=\"anchor\" href=\"#reinforcement-learning\">#</a> Reinforcement Learning</h3>\n<blockquote>\n<p>强化学习，让机器自己学习做任务</p>\n</blockquote>\n<p>机器学习的另一种方式，不需要输入与输出，只需要输入与奖励，机器就能自动找出对应关系。</p>\n<h2 id=\"异常检测-anomaly-detection\"><a class=\"anchor\" href=\"#异常检测-anomaly-detection\">#</a> 异常检测 Anomaly Detection</h2>\n<blockquote>\n<p>让机器可以回答 “我不知道”</p>\n</blockquote>\n<p>如：训练出了一个宝可梦跟数码宝贝的分类器，但是给了它一张恐龙的图片，它可以说不知道。</p>\n<h2 id=\"explainable-ai\"><a class=\"anchor\" href=\"#explainable-ai\">#</a> Explainable AI</h2>\n<blockquote>\n<p>让机器不仅可以回答正确答案，还可以回答为什么</p>\n</blockquote>\n<p>给模型大量图片，让它解释图片中哪些地方是重要的。</p>\n<h2 id=\"模型攻击-model-attack\"><a class=\"anchor\" href=\"#模型攻击-model-attack\">#</a> 模型攻击 Model Attack</h2>\n<blockquote>\n<p>人类对模型的攻击</p>\n</blockquote>\n<p>如：让机器学习识别猫，给它一张猫的图片，但是在图片中加入一些噪声，让机器识别不出来。</p>\n<h2 id=\"network-compression\"><a class=\"anchor\" href=\"#network-compression\">#</a> Network Compression</h2>\n<blockquote>\n<p>让模型更小，更快</p>\n</blockquote>\n<p>一个巨大的模型很难在正常设备中运行，通过很多技术让模型变小，让这些模型可以在常见设备中运行。</p>\n<h2 id=\"life-long-learning\"><a class=\"anchor\" href=\"#life-long-learning\">#</a> Life-Long Learning</h2>\n<blockquote>\n<p>让机器不断学习，及将机器训练成天网所面临的挑战</p>\n</blockquote>\n<h2 id=\"meta-learning\"><a class=\"anchor\" href=\"#meta-learning\">#</a> Meta Learning</h2>\n<blockquote>\n<p>让机器学习 &quot;<ins> 如何学习</ins> &quot;</p>\n</blockquote>\n<p>让机器从大量任务中发明新的算法，从过往经验学习新的算法</p>\n<h3 id=\"few-shot-learning\"><a class=\"anchor\" href=\"#few-shot-learning\">#</a> Few-Shot Learning</h3>\n<blockquote>\n<p>用少量的标注资料学习</p>\n</blockquote>\n",
            "tags": [
                "人工智能",
                "机器学习",
                "机器学习"
            ]
        },
        {
            "id": "https://crpdim.github.io/computer-science/programming-language/python/pyqt5_m1/",
            "url": "https://crpdim.github.io/computer-science/programming-language/python/pyqt5_m1/",
            "title": "M1安装pyqt5",
            "date_published": "2022-09-20T12:46:25.000Z",
            "content_html": "<h1 id=\"m1安装pyqt5\"><a class=\"anchor\" href=\"#m1安装pyqt5\">#</a> M1 安装 pyqt5</h1>\n<blockquote>\n<p>在 m1 上无法使用 pip 安装 pyqt5，总结一下安装经验</p>\n</blockquote>\n<h2 id=\"1-用homebrew安装-qt-sip-pyqt5\"><a class=\"anchor\" href=\"#1-用homebrew安装-qt-sip-pyqt5\">#</a> 1. 用 Homebrew 安装 qt、sip、PyQt5</h2>\n<h3 id=\"终端中输入\"><a class=\"anchor\" href=\"#终端中输入\">#</a> 终端中输入</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>brew <span class=\"token function\">install</span> qt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>brew <span class=\"token function\">install</span> sip</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>brew <span class=\"token function\">install</span> pyqt5</pre></td></tr></table></figure><h3 id=\"检查安装情况\"><a class=\"anchor\" href=\"#检查安装情况\">#</a> 检查安装情况：</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>brew list</pre></td></tr></table></figure><h2 id=\"2-找到刚安装的pyqt5的库文件\"><a class=\"anchor\" href=\"#2-找到刚安装的pyqt5的库文件\">#</a> 2. 找到刚安装的 pyqt5 的库文件</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 库文件所在位置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/opt/homebrew/Cellar/pyqt@5/5.15.7_2/lib/python3.9/site-packages</pre></td></tr></table></figure><h2 id=\"3-将site-packages中的文件复制到python环境\"><a class=\"anchor\" href=\"#3-将site-packages中的文件复制到python环境\">#</a> 3. 将 site-packages 中的文件复制到 python 环境</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#我使用 miniforge 创建的 python 虚拟环境所在位置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/Users/crpdim/miniforge3/envs/MyEnv/lib/python3.9/site-packages</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>使用cp命令将pyqt5库文件复制到python环境</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">cp</span> <span class=\"token parameter variable\">-r</span> /opt/homebrew/Cellar/pyqt@5/5.15.7_2/lib/python3.9/site-packages/. /opt/homebrew/Cellar/pyqt@5/5.15.7_2/lib/python3.9/site-packages</pre></td></tr></table></figure><h2 id=\"4-检查是否能正常使用\"><a class=\"anchor\" href=\"#4-检查是否能正常使用\">#</a> 4. 检查是否能正常使用</h2>\n<p><code>import PyQt5</code>  没发生异常则表示能！！正常使用！！<br />\n<span class=\"label success\">✔️success</span></p>\n<div class=\"note success\">\n<p>成功啦</p>\n</div>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_0\"> 红叉叉</label></li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>MyEnv<span class=\"token punctuation\">)</span> crpdim@MyComputer ~ %python</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Python <span class=\"token number\">3.9</span>.16 <span class=\"token punctuation\">(</span>main, Mar  <span class=\"token number\">8</span> <span class=\"token number\">2023</span>, 04:29:24<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>Clang <span class=\"token number\">14.0</span>.6 <span class=\"token punctuation\">]</span> :: Anaconda, Inc. on darwin</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Type <span class=\"token string\">\"help\"</span>, <span class=\"token string\">\"copyright\"</span>, <span class=\"token string\">\"credits\"</span> or <span class=\"token string\">\"license\"</span> <span class=\"token keyword\">for</span> <span class=\"token function\">more</span> information.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token function\">import</span> PyQt5</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "编程语言",
                "Python",
                "Python"
            ]
        },
        {
            "id": "https://crpdim.github.io/note/docker/",
            "url": "https://crpdim.github.io/note/docker/",
            "title": "Docker学习",
            "date_published": "2022-06-27T12:46:25.000Z",
            "content_html": "<h1 id=\"docker\"><a class=\"anchor\" href=\"#docker\">#</a> Docker</h1>\n<blockquote>\n<p>将硬件资源比作开发商拥有的一块地，那么物理机就可以看作一栋别墅，而虚拟机则可以看做楼房，容器的作用则相当于在房间中进行隔断，可以最大化利用资源。</p>\n</blockquote>\n<h2 id=\"虚拟化\"><a class=\"anchor\" href=\"#虚拟化\">#</a> 虚拟化</h2>\n<p>虚拟化 (英语：Virtualization) 是一种资源管理技术，是将计算机的各种实体资源，如服 务器、网络、内存及存储等，予以抽象、转换后呈现出来，<strong>打破实体结构间的不可切割的障碍，使用户可以比原本的组态更好的方式来应用这些资源</strong>。这些资源的新虚拟部份是不受现有资源的架设方式，地域或物理组态所限制。一般所指的虚拟化资源包括计算能力和资料存储。</p>\n<h2 id=\"docker-2\"><a class=\"anchor\" href=\"#docker-2\">#</a> Docker</h2>\n<blockquote>\n<p>Docker 是一个开发，运输和运行应用程序的开放平台。 Docker 使您可以将应用程序与基础架构分离， 以便快速交付软件。</p>\n</blockquote>\n<h3 id=\"优点\"><a class=\"anchor\" href=\"#优点\">#</a> 优点</h3>\n<p>使用 Docker，您可以像管理应用程序一样管理<strong>基础架构</strong> (OS)。 通过利用 Docker 的方法快速发送，测试和部署代码，您可以显着减少编写代码和在生产中运行代码之间的延迟。</p>\n<p>容器提供了隔离性，结论是，容器可以为各种测试提供很好的<strong>沙盒环境</strong>。并且，容器本身就具有 “标准性” 的特征，非常适合为服务创建构建块。Docker 的一些应用场景如下:</p>\n<ul>\n<li>加速本地开发和构建流程，使其更加高效、更加轻量化。本地开发人员可以构建、运行并分享 Docker 容器。容器可以在开发环境中构建，然后轻松的提交到测试环境中，并最终进入生产环 境。 开发人员与运维人员进行职责的逻辑分离</li>\n<li>能够让独立的服务或应用程序在不同的环境中，得到相同的运行结果。这一点在面向服务的架构和 重度依赖微型服务的部署由其实用。</li>\n<li>用 Docker 创建隔离的环境来进行测试。例如，用 Jenkins CI 这样的持续集成工具启动一个用于测试 的容器。(持续化集成 war 实际部署:jenkins 持续化集成 Jenkins + git)</li>\n<li>Docker 可以让开发者先在本机上构建一个复杂的程序或架构来进行测试，而不是一开始就在生产 环境部署、测试。</li>\n<li>构建一个多用户的平台即服务 (<strong>PaaS</strong>) 基础设施</li>\n<li>为开发、测试提供一个轻量级的独立的沙盒环境</li>\n<li>提供软件即服务 (SaaS) 应用程序，例如 Memcached 即服务</li>\n<li>高性能、超大规模的宿主机部署 (可以很多容器)</li>\n</ul>\n<blockquote>\n<p>沙盒：在计算机安全领域，沙盒 (英语:sandbox，又译为沙箱) 是一种安全机制，为运行中的程序提供的隔 离环境。通常是作为一些来源不可信、具破坏力或无法判定程序意图的程序提供实验之用。</p>\n</blockquote>\n<h3 id=\"集装箱思想\"><a class=\"anchor\" href=\"#集装箱思想\">#</a> 集装箱思想</h3>\n<p>Docker 借鉴了标准<strong>集装箱的概念</strong>。标准集装箱将货物运往世界各地，Dock 将这个模型运用到自己的设计中，唯一不同的是：集装箱运输货物，而 Docker 运输软件、应用程序。</p>\n<p>和集装箱一样，Docker 在执行上述操作时，<strong>并不关心容器中到底装了什么</strong>，它不管是 web 服务器，还是数据库，或者是应用程序服务器什么的。所有的容器都按照相同的方式将内容 “装载” 进去。</p>\n<p>Docker 也不关心你要把容器运到何方：我们可以在自己的笔记本中构建容器，上传到 Registry，然后下载到一个物理的或者虚拟的服务器来测试，在把容器部署到具体的主机中。像标准集装箱一样，Docker 容器方便替换，可以叠加，易于分发，并且尽量通用。</p>\n<h3 id=\"docker架构\"><a class=\"anchor\" href=\"#docker架构\">#</a> Docker 架构</h3>\n<p>三部分构成：Client、docker_host、Registry</p>\n<h4 id=\"client客户端用户操作-发送命令\"><a class=\"anchor\" href=\"#client客户端用户操作-发送命令\">#</a> Client（客户端）：用户操作 -&gt; 发送命令</h4>\n<ul>\n<li>docker build</li>\n<li>docker pull</li>\n<li>docker run</li>\n</ul>\n<h4 id=\"dockerhostdocker引擎解析客户端发送的命令\"><a class=\"anchor\" href=\"#dockerhostdocker引擎解析客户端发送的命令\">#</a> DOCKER—HOST（docker 引擎）：解析客户端发送的命令</h4>\n<p>分两部分：</p>\n<ul>\n<li>Image (镜像)：特殊文件叠加而成，镜像文件从镜像仓库中拉取。</li>\n<li>Containers (容器)：创建容器必须依赖镜像！</li>\n</ul>\n<h4 id=\"registry镜像仓库\"><a class=\"anchor\" href=\"#registry镜像仓库\">#</a> Registry（镜像仓库）</h4>\n<h2 id=\"docker命令\"><a class=\"anchor\" href=\"#docker命令\">#</a> Docker 命令</h2>\n<ul>\n<li>\n<p>docker 运行： <code>docker run 镜像名</code></p>\n</li>\n<li>\n<p>列出本地镜像 <code>docker images</code> ：列出镜像名、版本、id、建立时间、大小</p>\n</li>\n<li>\n<p>查找镜像： <code>docker search 镜像名</code></p>\n</li>\n<li>\n<p>拉取镜像： <code>docker pull 镜像名[:version]</code></p>\n<blockquote>\n<p>Docker 镜像首页，包括官方镜像和其它公开镜像。Docker Hub 上最受欢迎的 10 大镜像 (通过 Docker registry API 获取不了镜像被 pull 的个数，只能通过镜像的 stars 数量，来衡量镜像的流行度。毫无疑问， 拥有最高 stars 数量的库都是官方库。国情的原因，国内下载 Docker HUB 官方的相关镜像比较慢，可以使用国内 (<span class=\"exturl\" data-url=\"aHR0cDovL2RvY2tlci5pbw==\">docker.io</span>) 的一些镜像加速器，镜像保持和官方一致，关键是速度块，推荐使用。配置镜像加速器:</p>\n</blockquote>\n</li>\n<li>\n<p>删除镜像</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>、删除一个镜像</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> rmi 镜像名/id</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span>、删除多个镜像</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">docker</span> rmi 镜像名1/id1 镜像名2/id2 <span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3</span>、删除所有镜像</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">docker</span> rmi <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">docker</span> images <span class=\"token parameter variable\">-q</span><span class=\"token variable\">`</span></span></pre></td></tr></table></figure></li>\n<li>\n<p>创建容器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span> image <span class=\"token builtin class-name\">command</span> <span class=\"token punctuation\">[</span>ARG<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>创建交互式容器（exit 容器停止）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-i</span> <span class=\"token parameter variable\">-t</span> <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>c1 centos/bin/bash</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>创建守护式容器（exit 容器不停止）</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>c2 centos/bin/bash</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>options选项: -i、-t、-d、--name</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-i:交互式容器</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-t:tty，终端<span class=\"token punctuation\">(</span>分配一个终端，操作容器<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>--name：指定容器名称</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>-d:后台运行，并且打印容器id</pre></td></tr></table></figure></li>\n<li>\n<p>进入容器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>方式一:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> attach 容器名称/id  <span class=\"token punctuation\">(</span>ps:exit,容器停止<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>eg:docker attach u3</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>方式二:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> 容器名称/id /bin/bash <span class=\"token punctuation\">(</span>ps:exit,容器不会停止<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>eg:docker <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> u3 /bin/bash</pre></td></tr></table></figure></li>\n<li>\n<p>查看容器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> ps:查看正在运行的容器</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> -a:查看运行过的容器<span class=\"token punctuation\">(</span>历史<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> -l:最后一次运行的容器</pre></td></tr></table></figure></li>\n<li>\n<p>启动 / 停止容器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> start 容器名称/id </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> stop 容器名称/id</pre></td></tr></table></figure></li>\n<li>\n<p>获取容器 / 镜像元数据</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>查看容器/镜像全部信息: </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> inspect 容器/镜像</pre></td></tr></table></figure></li>\n<li>\n<p>删除容器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>删除一个容器:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">rm</span> 容器名/id</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>删除多个容器:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">rm</span> 容器名1/id1 容器名2/id2 <span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>删除所有容器</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">rm</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-a</span> <span class=\"token parameter variable\">-q</span><span class=\"token variable\">`</span></span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>PS:无法删除正在运行的容器</pre></td></tr></table></figure></li>\n<li>\n<p>查看容器日志 <code>docker logs 容器名/id</code></p>\n</li>\n<li>\n<p>文件拷贝</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>如果我们需要将文件拷贝到容器内可以使用cp命令</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">cp</span> 需要拷贝的文件或目录 容器名:容器目录</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>例如:docker <span class=\"token function\">cp</span> <span class=\"token number\">1</span>.txt c2:/root</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>也可以将文件从容器内拷贝出来</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">cp</span> 容器名:容器目录 需要拷贝的文件或目录 </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>例如:docker <span class=\"token function\">cp</span> c2:/root/2.txt /root</pre></td></tr></table></figure></li>\n<li>\n<p>目录挂载</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>我们可以在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以通过修改宿主</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>机某个目录的文件从而去影响容器。创建容器 添加-v参数 后边为 宿主机目录:容器目录</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-id</span> <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>c4 <span class=\"token parameter variable\">-v</span> /opt/:/usr/local/myhtml centos</pre></td></tr></table></figure></li>\n</ul>\n",
            "tags": [
                "技能学习",
                "docker"
            ]
        },
        {
            "id": "https://crpdim.github.io/computer-science/net/Net/",
            "url": "https://crpdim.github.io/computer-science/net/Net/",
            "title": "计算机网络体系结构",
            "date_published": "2022-06-20T12:46:25.000Z",
            "content_html": "<h1 id=\"计算机体系结构\"><a class=\"anchor\" href=\"#计算机体系结构\">#</a> 计算机体系结构</h1>\n<p>计算机网络定义： 互联的自治的计算机系统集合。</p>\n<h3 id=\"计算机网络组成\"><a class=\"anchor\" href=\"#计算机网络组成\">#</a> 计算机网络组成</h3>\n<p>由组成成分分：硬件、软件、协议</p>\n<p>由工作方式： 核心部分、边缘部分</p>\n<p>由功能组成： 资源子网、通信子网</p>\n<h3 id=\"计算机网络功能\"><a class=\"anchor\" href=\"#计算机网络功能\">#</a> 计算机网络功能：</h3>\n<ol>\n<li>数据通信</li>\n<li>资源共享</li>\n<li>分布式处理</li>\n<li>提高可靠性</li>\n<li>负载均衡</li>\n</ol>\n<h3 id=\"计算机网络分类\"><a class=\"anchor\" href=\"#计算机网络分类\">#</a> 计算机网络分类：</h3>\n<h4 id=\"按分布范围\"><a class=\"anchor\" href=\"#按分布范围\">#</a> 按分布范围：</h4>\n<ul>\n<li>广域网 WAN</li>\n<li>城域网 MAN</li>\n<li>局域网 LAN</li>\n<li>个域网 PAN</li>\n</ul>\n<h4 id=\"按传输技术\"><a class=\"anchor\" href=\"#按传输技术\">#</a> 按传输技术：</h4>\n<ul>\n<li>广播式网络</li>\n<li>点对点网络  （分组存储转发和路由选择机制）</li>\n</ul>\n<h4 id=\"按拓扑结构\"><a class=\"anchor\" href=\"#按拓扑结构\">#</a> 按拓扑结构：</h4>\n<ul>\n<li>总线型</li>\n<li>星型</li>\n<li>网状型</li>\n<li>环形</li>\n</ul>\n<h4 id=\"按使用者\"><a class=\"anchor\" href=\"#按使用者\">#</a> 按使用者：</h4>\n<ul>\n<li>公用网</li>\n<li>专用网</li>\n</ul>\n<h4 id=\"按交换技术\"><a class=\"anchor\" href=\"#按交换技术\">#</a> 按交换技术</h4>\n<ul>\n<li>电路交换网络</li>\n<li>报文交换网络</li>\n<li>分组交换网络</li>\n</ul>\n<h4 id=\"按传输介质\"><a class=\"anchor\" href=\"#按传输介质\">#</a> 按传输介质</h4>\n<ol>\n<li>有线： （双绞线、同轴电缆等）</li>\n<li>无线：（微波、蓝牙、无线电等）</li>\n</ol>\n<h3 id=\"性能指标\"><a class=\"anchor\" href=\"#性能指标\">#</a> 性能指标</h3>\n<ul>\n<li>\n<p>带宽：信道最高传输速率 (b/s)</p>\n</li>\n<li>\n<p>时延：数据从一端传送到另一端所需总时间</p>\n<ul>\n<li>发送时延</li>\n<li>传播时延</li>\n<li>处理时延</li>\n</ul>\n</li>\n<li>\n<p>时延带宽积： 发送端的第一个比特即将到达终点时，发送端已经发送了多少个比特</p>\n<p>时延带宽积 = 传播时延 x 信道带宽</p>\n</li>\n<li>\n<p>往返时延 RTT：发送端发送一个短分组到发送端收到来自接收端的确认（包括中间节点的处理时延、排队时延、以及转发数据的发送时延）</p>\n</li>\n<li>\n<p>吞吐量： 单位时间内通过某网络的数据量</p>\n</li>\n<li>\n<p>速率：数据传输速率、数据率、比特率 单位 (b/s)</p>\n</li>\n<li>\n<p>信道利用率： 信道有数据通过时间 ÷ (有 + 无) 数据通过时间</p>\n</li>\n</ul>\n<h2 id=\"计算机网络分层结构与参考模型\"><a class=\"anchor\" href=\"#计算机网络分层结构与参考模型\">#</a> 计算机网络分层结构与参考模型</h2>\n<h3 id=\"分层结构\"><a class=\"anchor\" href=\"#分层结构\">#</a> 分层结构</h3>\n<h4 id=\"分层原因\"><a class=\"anchor\" href=\"#分层原因\">#</a> 分层原因：</h4>\n<p>降低协议设计和调试的复杂性、方便对网络进行研究、实现和维护</p>\n<h4 id=\"分层原则\"><a class=\"anchor\" href=\"#分层原则\">#</a> 分层原则</h4>\n<ol>\n<li>每层都实现相对独立的功能，降低大系统复杂度</li>\n<li>各层之间界面自然清晰、易于理解、相互交流少</li>\n<li>各层功能的精确定义独立于具体实现方法、可以采用最合适的技术实现</li>\n<li>保持下层对上层的独立性、上层单向使用下层服务</li>\n<li>整个分层结构应能促进标准化工作</li>\n</ol>\n",
            "tags": [
                "计算机科学",
                "计算机网络",
                "计算机网络"
            ]
        },
        {
            "id": "https://crpdim.github.io/computer-science/net/RIP/",
            "url": "https://crpdim.github.io/computer-science/net/RIP/",
            "title": "RIP协议",
            "date_published": "2022-05-13T12:46:25.000Z",
            "content_html": "<h1 id=\"rip\"><a class=\"anchor\" href=\"#rip\">#</a> RIP</h1>\n<h2 id=\"rip-2\"><a class=\"anchor\" href=\"#rip-2\">#</a> RIP</h2>\n<blockquote>\n<p>应用层协议，使用 UDP 传送数据，520 端口</p>\n</blockquote>\n<h3 id=\"规定\"><a class=\"anchor\" href=\"#规定\">#</a> 规定</h3>\n<ol>\n<li>网络中每个路由器都要维护从自身到每个目的网络的距离纪录。</li>\n<li>路由器到直连网络的距离为 1。</li>\n<li>允许一条路径最多包含十五个路由器（距离为 16 表示网络不可达）。</li>\n<li>任意两个 RIP 路由器之间每 30s 广播一次 RIP 路由信息。</li>\n<li>不支持子网掩码的 RIP 广播。</li>\n</ol>\n<h3 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点</h3>\n<ol>\n<li>仅和相邻路由器交换信息。</li>\n<li>路由器交换的信息为自己完整的路由表。</li>\n<li>按固定时间交换路由信息。</li>\n</ol>\n<h4 id=\"缺点\"><a class=\"anchor\" href=\"#缺点\">#</a> 缺点</h4>\n<ol>\n<li>限制了网络规模</li>\n<li>路由器间交换完整地路由表，网络规模越大，开销越大</li>\n<li>网络出现问题，会出现慢收敛情况</li>\n</ol>\n<h3 id=\"距离向量算法\"><a class=\"anchor\" href=\"#距离向量算法\">#</a> 距离向量算法</h3>\n<p>每个路由表项目包含三个关键数据 | 目的网络 N | 距离 d | 下一跳地址 X|</p>\n<p>对相邻的路由器发送过来的 RIP 报文：</p>\n<ol>\n<li>\n<p>地址为 X 的相邻路由器发送过来的 RIP 报文，先修改报文中的所有项目，将下一条地址改为 X，把所有距离字段 + 1。</p>\n</li>\n<li>\n<p>对修改后的每个项目：</p>\n<ol>\n<li>原来路由表中没有目的网络 N，将该项目添加到路由表中。</li>\n<li>原来路由表中有目的网络 N，且下一条地址为 X，则替换本地路由表项目。</li>\n<li>原来路由表中有目的网络 N，且下一条地址不是 X，若收到的项目中距离字段小于本地路由表到该网络的距离字段，则替换原来的表项。</li>\n</ol>\n</li>\n<li>\n<p>若超过 180s 没收到相邻路由器的更新路由表，将此相邻路由器标记位不可达。</p>\n</li>\n<li>\n<p>返回</p>\n</li>\n</ol>\n",
            "tags": [
                "计算机科学",
                "计算机网络",
                "计算机网络"
            ]
        },
        {
            "id": "https://crpdim.github.io/computer-science/linux/Tmux/",
            "url": "https://crpdim.github.io/computer-science/linux/Tmux/",
            "title": "Tmux简单使用",
            "date_published": "2022-04-12T12:46:25.000Z",
            "content_html": "<h1 id=\"tmux\"><a class=\"anchor\" href=\"#tmux\">#</a> Tmux</h1>\n<h2 id=\"作用\"><a class=\"anchor\" href=\"#作用\">#</a> 作用</h2>\n<blockquote>\n<p>将窗口与会话彻底分离</p>\n</blockquote>\n<ul>\n<li>允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用。</li>\n<li>可以让新窗口 &quot;接入&quot; 已经存在的会话。</li>\n<li>允许每个会话有多个连接窗口，因此可以多人实时共享会话。</li>\n<li>支持窗口任意的垂直和水平拆分。</li>\n</ul>\n<h2 id=\"用法\"><a class=\"anchor\" href=\"#用法\">#</a> 用法</h2>\n<h3 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Ubuntu 或 Debian</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> tmux</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># Mac</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$ brew <span class=\"token function\">install</span> tmux</pre></td></tr></table></figure><h3 id=\"启动\"><a class=\"anchor\" href=\"#启动\">#</a> 启动</h3>\n<p>输入 tmux 启动 Tmux 窗口</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ tmux</pre></td></tr></table></figure><p><img data-src=\"https://github.com/Crpdim/crpdim.github.io/raw/main/tmux_1.png\" alt=\"uTools_1665966015180\" /></p>\n<h3 id=\"退出\"><a class=\"anchor\" href=\"#退出\">#</a> 退出</h3>\n<p>ctrl+d 或者输入 exit 命令就能退出 Tmux 窗口</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">exit</span></pre></td></tr></table></figure><h2 id=\"会话管理\"><a class=\"anchor\" href=\"#会话管理\">#</a> 会话管理</h2>\n<p>直接使用 <code> tmux</code>  命令建立新会话，窗口名称会从 0 依次往后增加，使用编号区分会话不直观，可以直接用以下命令为会话取名</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ tmux new <span class=\"token parameter variable\">-s</span> session_name</pre></td></tr></table></figure><h3 id=\"会话分离\"><a class=\"anchor\" href=\"#会话分离\">#</a> 会话分离</h3>\n<p>在 Tmux 窗口中，按下 <code>Ctrl+b d</code>  或者输入 <code>tmux detach</code>  命令，就会将当前会话与窗口分离。</p>\n<p>被分离的会话和里面的进程会在后台执行，使用 <code>tmux ls</code>  命令可以查看所有 tmux 会话</p>\n<h3 id=\"会话接入\"><a class=\"anchor\" href=\"#会话接入\">#</a> 会话接入</h3>\n<p><code>tmux attach</code>  命令用于重新接入某个已存在的会话。</p>\n<blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 使用会话编号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ tmux attach <span class=\"token parameter variable\">-t</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 使用会话名称</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$ tmux attach <span class=\"token parameter variable\">-t</span> session-name</pre></td></tr></table></figure></blockquote>\n<h3 id=\"会话杀死\"><a class=\"anchor\" href=\"#会话杀死\">#</a> 会话杀死</h3>\n<p>在 Tmux 窗口中，按下 <code>Ctrl+b x</code>  或 <code>Ctrl+d</code>  可以杀死当前会话</p>\n<p>使用 <code>tmux kill-session</code>  命令用于杀死某个会话。</p>\n<blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 使用会话编号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ tmux kill-session <span class=\"token parameter variable\">-t</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 使用会话名称</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$ tmux kill-session <span class=\"token parameter variable\">-t</span> <span class=\"token operator\">&lt;</span>session-name<span class=\"token operator\">></span></pre></td></tr></table></figure></blockquote>\n<h3 id=\"会话切换\"><a class=\"anchor\" href=\"#会话切换\">#</a> 会话切换</h3>\n<p><code>tmux switch</code>  命令用于切换会话。</p>\n<blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 使用会话编号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ tmux switch <span class=\"token parameter variable\">-t</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 使用会话名称</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>$ tmux switch <span class=\"token parameter variable\">-t</span> <span class=\"token operator\">&lt;</span>session-name<span class=\"token operator\">></span></pre></td></tr></table></figure></blockquote>\n<h3 id=\"会话重命名\"><a class=\"anchor\" href=\"#会话重命名\">#</a> 会话重命名</h3>\n<p><code>tmux rename-session</code>  命令用于重命名会话。</p>\n<blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ tmux rename-session <span class=\"token parameter variable\">-t</span> <span class=\"token number\">0</span> new_name</pre></td></tr></table></figure></blockquote>\n<h2 id=\"窗格管理\"><a class=\"anchor\" href=\"#窗格管理\">#</a> 窗格管理</h2>\n<p><code>tmux split-window</code>  命令用来划分窗格。</p>\n<blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 划分上下两个窗格</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ tmux split-window</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 划分左右两个窗格</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$ tmux split-window <span class=\"token parameter variable\">-h</span></pre></td></tr></table></figure></blockquote>\n<p><img data-src=\"https://github.com/Crpdim/crpdim.github.io/raw/main/tmux_2.png\" alt=\"image-20221017084655134\" /></p>\n<h2 id=\"移动光标\"><a class=\"anchor\" href=\"#移动光标\">#</a> 移动光标</h2>\n<p><code>tmux select-pane</code>  命令用来移动光标位置。</p>\n<blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 光标切换到上方窗格</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ tmux select-pane <span class=\"token parameter variable\">-U</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 光标切换到下方窗格</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>$ tmux select-pane <span class=\"token parameter variable\">-D</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 光标切换到左边窗格</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>$ tmux select-pane <span class=\"token parameter variable\">-L</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 光标切换到右边窗格</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>$ tmux select-pane <span class=\"token parameter variable\">-R</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"交换窗格位置\"><a class=\"anchor\" href=\"#交换窗格位置\">#</a> 交换窗格位置</h2>\n<p><code>tmux swap-pane</code>  命令用来交换窗格位置。</p>\n<blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 当前窗格上移</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ tmux swap-pane <span class=\"token parameter variable\">-U</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 当前窗格下移</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>$ tmux swap-pane <span class=\"token parameter variable\">-D</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"其余快捷键\"><a class=\"anchor\" href=\"#其余快捷键\">#</a> 其余快捷键</h2>\n<p>使用 <code>Ctrl+b ?</code>  快捷键可以获取所有 tmux 快捷键</p>\n",
            "tags": [
                "计算机科学",
                "Linux学习",
                "linux"
            ]
        },
        {
            "id": "https://crpdim.github.io/computer-science/programming-language/cpp/week-1/",
            "url": "https://crpdim.github.io/computer-science/programming-language/cpp/week-1/",
            "title": "001Test",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<h1 id=\"c-day-01\"><a class=\"anchor\" href=\"#c-day-01\">#</a> C++ Day-01</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>scanner</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"hello world!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "编程语言",
                "C++",
                "C++"
            ]
        },
        {
            "id": "https://crpdim.github.io/%E6%A8%A1%E7%89%88/",
            "url": "https://crpdim.github.io/%E6%A8%A1%E7%89%88/",
            "title": "blog模版",
            "date_published": "2019-07-25T08:43:00.000Z",
            "content_html": "<h1 id=\"hello\"><a class=\"anchor\" href=\"#hello\">#</a> Hello</h1>\n<p><span class=\"spoiler\" title=\"好奇心害死猫\">balabala</span></p>\n<details><summary>默认默认 这里是一段文字</summary><div>\n<p><ins>下划线</ins></p>\n</div></details>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_0\"> 红叉叉</label></li>\n</ul>\n<div class=\"note danger\">\n<p>危险 危险</p>\n</div>\n<p><span class=\"rainbow\">赤橙黄绿青蓝紫</span></p>\n<details><summary>内容 里面有图片题目</summary><div>\n<p><img data-src=\"/assets/photo-(1).jpg\" alt=\"photo-(1)\" /></p>\n<ol>\n<li class=\"quiz true\">编译时多态主要指运算符重载与函数重载，而运行时多态主要指虚函数。</li>\n<li class=\"quiz multi\">有基类  <code>SHAPE</code> ，派生类  <code>CIRCLE</code> ，声明如下变量： <figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SHAPE shape1<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CIRCLE circle1<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>q1<span class=\"token punctuation\">;</span></pre></td></tr></table></figure>下列哪些项是 “派生类对象替换基类对象”。\n<ul class=\"options\">\n<li class=\"correct\"><code>p1=&amp;circle1;</code> </li>\n<li><code>q1=&amp;shape1;</code></li>\n<li class=\"correct\"><code>shape1=circle1;</code> </li>\n<li><code>circle1=shape1;</code></li>\n</ul>\n<blockquote>\n<ul class=\"options\">\n<li>✔️ 令基类对象的指针指向派生类对象</li>\n<li>❌ 派生类指针指向基类的引用</li>\n<li>✔️ 派生类对象给基类对象赋值</li>\n<li>❌ 基类对象给派生类对象赋值</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">下列叙述正确的是 <span class=\"gap\"></span> 。\n<ul class=\"options\">\n<li>虚函数只能定义成无参函数</li>\n<li>虚函数不能有返回值</li>\n<li>能定义虚构造函数</li>\n<li class=\"correct\">A、B、C 都不对</li>\n</ul>\n</li>\n<li class=\"quiz fill\">如定义  <code>int e=8; double f=6.4, g=8.9;</code> ，则表达式  <code>f+int (e/3*int (f+g)/2)%4</code>  的值为 <span class=\"gap\">9.4</span>。\n<blockquote>\n<p>注意运算顺序和数据类型<br />\n<span class=\"mistake\"> 8.4</span></p>\n</blockquote>\n</li>\n</ol>\n<p><div class=\"links\"><div class=\"item\" title=\"Jasper\" style=\"--block-color:#e9546b;\"><a href=\"https://crpdim.github.io/\" class=\"image\" data-background-image=\"/images/avatar.jpg\"></a>\n          <div class=\"info\">\n          <a href=\"https://crpdim.github.io/\" class=\"title\">你好呀</a>\n          <p class=\"desc\">Jasper's Blog</p>\n          </div></div></div></p>\n<p><div class=\"media-container\"><div class=\"player\" data-type=\"audio\" data-src='[{\"title\":\"列表1\",\"list\":[\"https://music.163.com/#/playlist?id=3072883579\",\"https://music.163.com/#/playlist?id=360062344\"]},{\"title\":\"列表2\",\"list\":[\"https://music.163.com/#/playlist?id=8168775473\"]}]'></div></div></p>\n<details class=\"info\"><summary>蓝色</summary><div>\n<div class=\"tab\" data-id=\"id2\" data-title=\"②号标签卡片 1\">\n<ul>\n<li>这里是卡片 1 的内容</li>\n</ul>\n</div>\n<div class=\"tab\" data-id=\"id2\" data-title=\"②号标签卡片 2\">\n<ul>\n<li>这里是卡片 2 的内容</li>\n</ul>\n</div>\n</div></details>\n</div></details>\n",
            "tags": [
                "blog模版"
            ]
        }
    ]
}